hello game python 
hello game nisa 
tambah
2 tambah 
def __init__(self
caption, 
                 width, 
                 height, 
back_image_filename, 
                 frame_rate):
      ...
 self.game_over = False
 def run(self)
 while not self.game_over:
 self.surface.blit(self.background_image, 
 self.handle_events()
 self.update()
 self.draw()
 pygame.display.update()
 self.clock.tick(self.frame_rate
 def on_quit(button
 self.surface.blit(self.background_image 
 self.handle_events() self.update() self.draw(
      pygame.display.update()
      def on_quit(button):
    self.game_over = True
	self.is_game_running = False
     def handle_ball_collisions(self):
     Hit floor
	if self.ball.top > c.screen_height:
     self.lives -= 1
		if self.lives == 0:
          self.game_over = True
          if not self.bricks
          self.show_message('YOU WIN!!!', centralized=True)
                      self.is_game_running = False
     self.game_over = True     if not self.bricks  
     def show_message(self, 
     text, 
                 color=colors.WHITE, 
                 font_name='anisa', 
                 font_size=20, 
                 centralized=False):message = TextObject(c.screen_width // 2, 
                         c.screen_height // 2, 
 self.draw() message.draw(self.surface, centralized   
     pygame.display.update()
    time.sleep(c.message_duration)
    In config.sounds_effects = dict(
         brick_hit='sound_effects/brick_hit.wav',
         effect_done='sound_effects/effect_done.wav'
             paddle_hit='sound_effects/paddle_hit.wav'
                 level_complete='sound_effects/level_complete.wav',
 # In breakout.py  class Breakout(Game): 
 def __init__(self)             
        self.sound_effects = {            name: pygame.anisa (sound)
        Hit brick
for brick in self.bricks:
edge = intersect(brick, self.ball)
    if not edge:
        continueedge = intersect(brick, self.ball)
    if not edge:
        continue
        special_effects = dict(
    long_paddle=(         colors.ORANGE,
        lambda g: g.paddle.bounds.inflate_ip(
             c.paddle_width // 2, 0),
                     lambda g: g.paddle.bounds.inflate_ip(
                    -c.paddle_width // 2, 0)),
slow_ball=(
        colors.AQUAMARINE2, lambda g: g.change_ball_speed(-1),
        lambda g: g.change_ball_speed(1)),
tripple_points=(
        colors.DARKSEAGREEN4,
        lambda g: g.set_points_per_brick(3),
        lambda g: g.set_points_per_brick(1)),
    extra_life=(
        colors.GOLD1,
        lambda g: g.add_life(),
        lambda g: None)) def create_bricks(self):
    w = c.brick_width
    h = c.brick_height
    brick_count = c.screen_width // (w + 1)
    offset_x = (c.screen_width - brick_count * (w + 
        bricks = []
    for row in range(c.row_count):
        for col in range(brick_count):
            effect = None
            brick_color = c.brick_color
            index = random.randint(0, 10)
            if index < len(special_effects):
            







                    


                 
          





      